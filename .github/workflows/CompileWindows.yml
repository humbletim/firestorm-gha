name: CompileWindows

on:
  # pull_request:
  workflow_dispatch:
      inputs:
        fs3p_giturl:
          description: |
            base HTTPS folder to clone 3p dependencies from
            - https://vcs.firestormviewer.org/3p-libraries
            - https://github.com
          required: true
          default: https://github.com
        buildsys:
          description: 'ninja or msbuild'
          required: true
          default: ninja
        tmate:
          type: boolean
          description: pause with tmate session
          default: false
        depth:
          type: choice
          description: depth
          default: fsenv.3p.configure
          options:
            - fsenv
            - fsenv.3p
            - fsenv.3p.configure
            - fsenv.3p.configure.llcommon
            - fsenv.3p.configure.llcommon.plugins
            - fsenv.3p.configure.llcommon.plugins.firestorm-bin
            - fsenv.3p.configure.llcommon.plugins.firestorm-bin.llpackage

defaults:
  run:
    shell: bash

jobs:
  windows_build:
    runs-on: windows-2019
    env:
       VIEWER_CHANNEL: VR-GHA
       AUTOBUILD_BUILD_ID: 67470
       AUTOBUILD_CONFIGURATION: ReleaseFS_open
    steps:
    # - uses: actions/checkout@v2
    #   with:
    #     submodules: true
    - name: Quick Checkout
      shell: bash
      run: |
        pwd
        set -x
        git clone --quiet --recurse-submodules --filter=tree:0 https://github.com/${GITHUB_REPOSITORY}.git --branch ${GITHUB_REF_NAME} ${GITHUB_WORKSPACE}
        ls -lrtha

    - name: Setup tmate session
      if: ${{ inputs.tmate == true }}
      uses: mxschmitt/action-tmate@v3
      with:
        limit-access-to-actor: true

    - name: Preset ENV
      shell: bash
      run: |
        export INLINE_FS3P_GITURL="${{ github.event.inputs.fs3p_giturl }}"
        echo =============================================================
        .github/fsenv.sh
        echo =============================================================

        .github/fsenv.sh | tee -a $GITHUB_ENV
        if [[ ! ${GITHUB_ACTIONS+x} ]] ; then #dev
          set -ea && source <( .github/fsenv.sh ) && set +ea && test -n "$VIEWER_CHANNEL" -a -n "$FSBUILD_DIR" -a -n "$AUTOBUILD_VSVER" #dev
        fi #dev

    - name: Verify ENV
      shell: bash
      run: |
        . ${_3P_UTILSDIR}/_assert_defined.sh
        assert_defined VIEWER_CHANNEL FSBUILD_DIR AUTOBUILD_CONFIG_FILE INLINE_FS3P_GITURL 

    - name: Prep build dirs
      shell: cmd
      run: |
        echo cd=%cd%
        echo FSBUILD_DIR=%FSBUILD_DIR%
        df -h
        mkdir %FSBUILD_DIR%
        mkdir c:\cache\autobuild
        mkdir c:\cache\packages
        mkdir c:\build\newview
        mkdir 3p-inline
        cd %FSBUILD_DIR%
          mklink /j packages c:\cache\packages
          mklink /j newview c:\build\newview
        cd ..
        dir %FSBUILD_DIR%
        dir
        echo AUTOBUILD_INSTALLABLE_CACHE=c:\cache\autobuild>> %GITHUB_ENV%

    - name: Setup vsdevenv
      uses: seanmiddleditch/gha-setup-vsdevenv@master
    - name: Setup MSBuild
      if: ${{ github.event.inputs.buildsys == 'msbuild' }}
      uses: microsoft/setup-msbuild@v1.0.2
    - name: Setup Ninja
      uses: seanmiddleditch/gha-setup-ninja@master
      # if: ${{ github.event.inputs.buildsys == 'ninja' }}
    - name: Setup requirements.txt
      run: |
        echo "git+https://bitbucket.org/lindenlab/autobuild.git#egg=autobuild" | tee requirements.txt
    - name: Setup python
      uses: actions/setup-python@v2
      with:
        python-version: 3.8
        architecture: x64
        cache: 'pip'
    - name: Workaround Firestorm Python.cmake 
      run: |
        export PYTHON_EXECUTABLE=$(cygpath -ms "`which python`") #dev
        echo PYTHON_EXECUTABLE=${PYTHON_EXECUTABLE} | tee -a $GITHUB_ENV
    - name: Get software versions please
      shell: cmd
      run: |
        echo AUTOBUILD_INSTALLABLE_CACHE='%AUTOBUILD_INSTALLABLE_CACHE%'
        echo PYTHON_EXECUTABLE='%PYTHON_EXECUTABLE%'
        cmake --version
        git --version
        python --version
        cl.exe
        ${{ github.event.inputs.buildsys }}.exe --version
        ninja --version
        echo " "
        df -h
    - name: Install autobuild through PIP
      run: |
        which autobuild || pip install 'git+https://bitbucket.org/lindenlab/autobuild.git#egg=autobuild' #dev
    - name: generate sorted 3p-inline manifest
      shell: bash
      run: |
        for x in $INLINE_FS3P_DEPS ; do echo $x ; done | sort -u | tee 3p-inline.sorted.txt

    - name: cache -- 3p-inline
      if: ${{ inputs.depth >= 'fsenv.3p' }}
      id: cached-3p-inline
      uses: actions/cache@v2
      with:
        key: ${{ runner.os }}-3p-inline-${{ hashFiles('3p-inline.sorted.txt') }}-FirestormVR-GHA
        path: |
          3p-inline/*/_results.env
          3p-inline/*/*.tar.bz2
    - name: Patch and build local 3p packages
      if: ${{ inputs.depth >= 'fsenv.3p' }}
      # if: steps.cached-3p-inline.outputs.cache-hit != 'true'
      shell: bash
      run: |
        .github/3p/CompileWindows.autobuild-setup.sh #dev
        test -f autobuild.xml.sorted.txt

    - name: cache -- autobuild downloads
      if: ${{ inputs.depth >= 'fsenv.3p.configure' }}
      id: cached-downloads
      uses: actions/cache@v2
      with:
        path: ${{ env.AUTOBUILD_INSTALLABLE_CACHE }}
        key: ${{ runner.os }}-downloads-${{ hashFiles('autobuild.xml.sorted.txt') }}-FirestormVR-GHA

    - name: cache -- buildir packages
      if: ${{ inputs.depth >= 'fsenv.3p.configure' }}
      id: cached-buildir-packages
      uses: actions/cache@v2
      with:
        path: c:\cache\packages
        key: ${{ runner.os }}-buildir-packages-${{ hashFiles('autobuild.xml.sorted.txt') }}-FirestormVR-GHA

    - name: Reset cached packages sentinels
      if: ${{ inputs.depth >= 'fsenv.3p.configure' }}
      # if: steps.cached-buildir-packages.outputs.cache-hit == 'true'
      shell: bash
      run: |
        .github/fs_reset_sentinels.sh ${FSBUILD_DIR} #dev
        ls -lrt autobuild.xml ${FSBUILD_DIR}/packages/cmake_tracking/*_installed || true

    - name: Configure autobuild (ninja)
      if: ${{ inputs.buildsys == 'ninja' && inputs.depth >= 'fsenv.3p.configure' }}
      shell: bash
      run: |
        autobuild --version
        test -n "${VIEWER_CHANNEL}" && test -n "${PYTHON_EXECUTABLE}" #dev
        autobuild configure -- --ninja --package --openal --chan "${VIEWER_CHANNEL}" -DPYTHON_EXECUTABLE=${PYTHON_EXECUTABLE} -DLL_TESTS:BOOL=FALSE -DVS_DISABLE_FATAL_WARNINGS=ON #dev
    - name: Build llcommon (ninja)
      if: ${{ inputs.buildsys == 'ninja' && inputs.depth >= 'fsenv.3p.configure.llcommon' }}
      run: |
        ninja -C ${FSBUILD_DIR} SLPlugin media_plugin_cef media_plugin_libvlc #dev
    - name: Build plugins (ninja)
      if: ${{ inputs.buildsys == 'ninja' && inputs.depth >= 'fsenv.3p.configure.llcommon.plugins' }}
      run: |
        ninja -C ${FSBUILD_DIR} SLPlugin media_plugin_cef media_plugin_libvlc #dev
    - name: Build precompiled header (ninja)
      if: ${{ inputs.buildsys == 'ninja' && inputs.depth >= 'fsenv.3p.configure.llcommon.plugins.firestorm-bin' }}
      run: |
        ninja -C ${FSBUILD_DIR} newview/CMakeFiles/firestorm-bin.dir/llviewerprecompiledheaders.cpp.obj #dev
    - name: Build firestorm-bin (ninja)
      if: ${{ inputs.buildsys == 'ninja' && inputs.depth >= 'fsenv.3p.configure.llcommon.plugins.firestorm-bin' }}
      run: |
        ninja -C ${FSBUILD_DIR} firestorm-bin #dev
    - name: Package (ninja)
      if: ${{ inputs.buildsys == 'ninja' && inputs.depth >= 'fsenv.3p.configure.llcommon.plugins.firestorm-bin.llpackage' }}
      run: |
        ninja -C ${FSBUILD_DIR} llpackage #dev
    - name: Upload Artifact (ninja)
      if: ${{ inputs.buildsys == 'ninja' && inputs.depth >= 'fsenv.3p.configure.llcommon.plugins.firestorm-bin.llpackage' }}
      uses: actions/upload-artifact@v2
      with:
        name: ${{ format('{0}-{1}-{2}-{3}-{4}', runner.os, github.event.inputs.buildsys, env.VIEWER_CHANNEL, env.VIEWER_VERSION_STR, env.VIEWER_VERSION_GITHASH) }}
        path: |
          ${{ env.FSBUILD_DIR }}/newview/*_Setup.exe
          autobuild.xml.sorted.txt
          3p-inline.sorted.txt

    - name: Configure autobuild (msbuild)
      if: ${{ inputs.buildsys == 'msbuild' && inputs.depth >= 'fsenv.3p.configure' }}
      shell: cmd
      run: |
        autobuild --version
        autobuild configure -- --package --openal --chan ${{ env.VIEWER_CHANNEL }} -DPYTHON_EXECUTABLE=${{ env.PYTHON_EXECUTABLE }} -DLL_TESTS:BOOL=FALSE -DVS_DISABLE_FATAL_WARNINGS=ON
    - name: Build & Package (msbuild)
      if: ${{ inputs.buildsys == 'msbuild' && inputs.depth >= 'fsenv.3p.configure.llcommon.plugins.firestorm-bin.llpackage' }}
      shell: cmd
      run: |
        msbuild ${{ env.FSBUILD_DIR }}/Firestorm.sln /target:llpackage /property:Configuration=Release;Platform=x64 /maxcpucount
    - name: Upload Artifact (msbuild)
      if: ${{ inputs.buildsys == 'msbuild' && inputs.depth >= 'fsenv.3p.configure.llcommon.plugins.firestorm-bin.llpackage' }}
      uses: actions/upload-artifact@v2
      with:
        name: windows-${{ env.VIEWER_CHANNEL }}-${{ env.VIEWER_VERSION_STR }}-${{ env.VIEWER_VERSION_GITHASH }}
        path: ${{ env.FSBUILD_DIR }}/newview/Release/*_Setup.exe

