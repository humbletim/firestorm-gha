name: CompileWindows

on:
  # pull_request:
  workflow_dispatch:
      inputs:
        fstuple:
          type: string
          default: base=6.6.17 repo=FirestormViewer/phoenix-firestorm branch=Firestorm_6.6.17
          options:
            - base=6.6.17 repo=FirestormViewer/phoenix-firestorm branch=Firestorm_6.6.17
            - base=7.1.2 repo=FirestormViewer/phoenix-firestorm-alpha branch=master

defaults:
  run:
    shell: bash
#   shell: C:\Program Files\Git\bin\bash.EXE --noprofile --norc -e -o pipefail {0}
#   shell: C:\msys64\usr\bin\bash.exe --noprofile --norc -e -o pipefail {0}

env:
   PATH: /c/Program Files/Git/bin:/c/Program Files/Git/usr/bin

jobs:
  windows_build:
    runs-on: windows-2022
    steps:

    # no-ops that pre-populate upload-artifact, restore-only and save-only in /d/a/_actions/actions
    - uses: actions/upload-artifact@v4
      with:
        name: my-artifact
        path: /invalid/path
        if-no-files-found: ignore
    - uses: actions/cache/restore@v4
    # - uses: actions/cache@v4
      with:
        lookup-only: true
        key: /dev/null
        path: /dev/null
  
    - name: Output Inputs
      shell: bash
      run: echo "${{ toJSON(github.event.inputs) }}"

    - name: Initial Bootstrapping
      run: |
        git clone --quiet --filter=tree:0 --single-branch --branch ${GITHUB_REF_NAME} https://github.com/${GITHUB_REPOSITORY} fsvr
        for x in ${{github.event.inputs.fstuple}}; do
          echo $x | tee -a $GITHUB_ENV
        done

    - name: Run as Action
      uses: ./fsvr/actions-node-script
      with:
        environment: '*=process.env'
        shell: bash
        run: |
            echo testing 1 2 3
            echo ${{ github.event.inputs.fstuple }} 
            test -v ACTIONS_CACHE_URL && echo "cache url available" || echo "cache url not available"
            env | grep -Eo '^(ACTIONS|GITHUB)_[^=]+'

    - name: Run as Action
      uses: ./fsvr/actions-node-script
      with:
        run: ./fsvr/gha-bootstrap.sh
        environment: |
            ${{ github.event.inputs.fstuple }}
            *=process.env
# 
#     - name: Setup tmate session
#       uses: mxschmitt/action-tmate@v3
#       env:
#         foo: bar
#       with:
#         limit-access-to-actor: true

#      - name: Nunja Mapping
#       run: |
#         mkdir -pv build
#         ./fsvr/util/generate_build_vars.sh Firestorm-VR-GHA `cat $nunja_dir/viewer_version.txt` build/ | tee build/build_vars.env | tee $GITHUB_ENV
#         ./fsvr/util/generate_msvc_env.bat > build/msvc.env
# 
# 
#     - name: 010_ensure_build_directories
#       run: ./fsvr/util/build.sh 010
# 
#     - name: 020_perform_replacements
#       run: ./fsvr/util/build.sh 020
# 
#     - name: 040_generate_package_infos
#       run: ./fsvr/util/build.sh 040
# 
#     - name: 050_generate_packages_info_text
#       run: ./fsvr/util/build.sh 050
# 
#     - name: 060_download_packages
#       run: ./fsvr/util/build.sh 060
# 
#     - name: 070_verify_downloads
#       run: ./fsvr/util/build.sh 070
# 
#     - name: 080_untar_packages
#       run: ./fsvr/util/build.sh 080
# 
#     - name: 085_prepare_msys_msvc
#       run: ./fsvr/util/build.sh 085
# 
#     - name: 090_ninja_preflight
#       run: ./fsvr/util/build.sh 090
# 
#     - name: 0a0_ninja_build
#       run: ./fsvr/util/build.sh 0a0
# 
#     - name: 0b0_bundle
#       run: ./fsvr/util/build.sh 0b0
# 
#     - name: Setup tmate session
#       uses: mxschmitt/action-tmate@v3
#       with:
#         limit-access-to-actor: true
