name: CompileWindows

on:
  # pull_request:
  workflow_dispatch:
      inputs:
        fstuple:
          type: string
          default: base=6.6.17 repo=FirestormViewer/phoenix-firestorm branch=Firestorm_6.6.17
          options:
            - base=6.6.17 repo=FirestormViewer/phoenix-firestorm branch=Firestorm_6.6.17
            - base=7.1.2 repo=FirestormViewer/phoenix-firestorm-alpha branch=master
            - base=7.1.2 repo=FirestormViewer/phoenix-firestorm branch=7.1.4_Mar14_preview

defaults:
  run:
    # shell: bash
    shell: bash --noprofile --norc -e -o pipefail ./SHELL.sh {0}
#   shell: C:\msys64\usr\bin\bash.exe --noprofile --norc -e -o pipefail {0}

env:
    shell: bash --noprofile --norc -e -o pipefail ./SHELL.sh {0}
#    PATH: ${{ github.workspace }}\bin

jobs:
  windows_build:
    runs-on: windows-2022
    steps:

    # no-ops that pre-populate upload-artifact, restore-only and save-only in /d/a/_actions/actions
    - uses: actions/upload-artifact@v4
      with:
        name: my-artifact
        path: /invalid/path
        if-no-files-found: ignore
    - uses: actions/cache/restore@v4
    # - uses: actions/cache@v4
      with:
        lookup-only: true
        key: /dev/null
        path: /dev/null
  
    - name: Output Inputs
      shell: bash
      run: |
        echo "${{ toJSON(github.event.inputs) }}"
        declare -xp PATH

        # env | sort > initial.env
        git clone --quiet --filter=tree:0 --single-branch --branch ${GITHUB_REF_NAME} https://github.com/${GITHUB_REPOSITORY} fsvr \
          && echo "cloned ${GITHUB_REPOSITORY} into ./fsvr" >&2

        reponame=$(basename "${GITHUB_REPOSITORY}")
        eval `(
          for x in ${{github.event.inputs.fstuple}}; do
            echo $x | tee -a $GITHUB_ENV
          done
          echo fsvr_dir=$PWD/fsvr
          echo fsvr_step=$PWD/fsvr/util/build.sh
          echo workspace=$(/usr/bin/cygpath -ua "$GITHUB_WORKSPACE")
          echo userprofile=$(/usr/bin/cygpath -ua "$USERPROFILE")
        ) | tee -a $GITHUB_ENV`

        ######################################################################
        echo "$(cat<<EOF
        #!/bin/bash
        function tee() { TEE=c:/msys64/usr/bin/tee.exe /c/hostedtoolcache/windows/Python/3.9.13/x64/python3.exe $fsvr_dir/util/tee.py "\$@" ; }
        function hostname() { $PWD/bin/hostname ; }
        declare -xf tee hostname
        declare -x PATH="$userprofile/bin:$workspace/bin:/c/tools/zstd:/c/Program Files/Git/bin:/c/Program Files/Git/usr/bin:/c/hostedtoolcache/windows/Python/3.9.13/x64/Scripts:/c/hostedtoolcache/windows/Python/3.9.13/x64:/c/Program Files/OpenSSL/bin:/c/Windows/System32/OpenSSH:/c/Program Files/nodejs:/c/Program Files/LLVM/bin:/c/ProgramData/Chocolatey/bin:/c/Windows/system32"
        if [[ "\$1" == "-c" ]] ; then shift ; fi
        exec "/c/Program Files/Git/usr/bin/bash.exe" -Euo pipefail -c "\${@//\\\\/\\\\\\\\}"
        EOF
        ######################################################################
        )" | tee SHELL.sh
        chmod a+x SHELL.sh

        ( echo stdout ; echo stderr >&2 ) | tee /dev/stderr >/dev/null || true

        which envsubst || true

        mv -v '/c/Program Files/Git/usr/bin/tee.exe' '/c/Program Files/Git/usr/bin/tee.orig.exe'

        mkdir -pv $userprofile/bin
        cp -uav c:/msys64/usr/bin/wget.exe c:/msys64/usr/bin/envsubst.exe \
          $userprofile/bin/

        which envsubst || exit 88

        # while read name ; do mv -v "$name" "${name/.exe/.orig.exe}" ; done < <(/c/Windows/system32/where.exe hostname.exe tee.exe | tr -d '\r' | tr '\\' '/')
        exit 0

    - name: Initial Bootstrapping
      run: |
        declare -f tee
        (
          set -x
          ( echo stdout ; echo stderr >&2 ) | tee /dev/stderr >/dev/null
          [[ "$((( echo stdout ; echo stderr >&2 ) | tee /dev/stderr) 2>&1)" =~ stderr.*stdout.*stdout ]] || exit 83
        )
        $fsvr_dir/util/_utils.sh ht-ln $fsvr_dir/actions-node-script ./fsvr-action

        # $fsvr_dir/util/_utils.sh ht-xpreclude hostname tee
        exit 0


    - name: ./fsvr-action test
      uses: ./fsvr-action
      with:
        shell: ${{ env.shell }}
        run: |
          a=b
          echo $a 

    - name: GHA Bootstrapping
      uses: ./fsvr-action
      with:
        shell: ${{ env.shell }}
        run: ${{ env.fsvr_dir}}/gha-bootstrap.sh
        environment: |
            ${{ github.event.inputs.fstuple }}
            *=process.env

    - name: PATH/ENV preflight tests
      run: |
        set -x
        declare -xp PATH
        # env | sort > after-gha.env ; diff after.env after-gha.env || true
        jq --version
        hostname
        test `hostname` == "windows-2022" || exit 2022
        test -v nunja_dir || exit 122
        test -d "$nunja_dir" || exit 123
        echo 'test $a' | env a=b envsubst || exit 124
        
    # - name: Setup tmate session
    #   uses: mxschmitt/action-tmate@v3
    #   with:
    #     limit-access-to-actor: true

    - name: Nunja Mapping
      env:
        root_dir: repo/${{ env.branch }}
      run: |
        mkdir -pv build
        $fsvr_dir/util/_utils.sh ht-ln $root_dir/indra indra
        $fsvr_dir/util/generate_build_vars.sh Firestorm-VR-GHA `cat $fsvr_dir/$base/viewer_version.txt` build/ \
           | tee build/build_vars.env | tee $GITHUB_ENV
        $fsvr_dir/util/generate_msvc_env.bat > build/msvc.env

    - name: 010_ensure_build_directories
      run: $fsvr_step 010

    - name: 020_perform_replacements
      run: $fsvr_step 020

    - name: 038_provision_openvr
      run: $fsvr_step 038

    - name: 039_provision_p373r
      run: $fsvr_step 039

    - name: 040_generate_package_infos
      run: $fsvr_step 040

    - name: 050_generate_packages_info_text
      run: $fsvr_step 050
# 
#     - name: 060_download_packages
#       run: $fsvr_step 060
# 
#     - name: 070_verify_downloads
#       run: $fsvr_step 070
# 
    - name: 080_untar_packages
      uses: ./fsvr-action
      with:
        environment: '*=process.env'
        shell: ${{ env.shell }}
        run: |
          INPUT_key=$base-build-packages-b INPUT_path=build/packages \
            /c/Program\ Files/nodejs/node \
            /d/a/_actions/actions/cache/v4/dist/restore-only/index.js \
            | grep -i 'cache restored' && echo 'yup' || echo 'nope' 

    # - name: 080_untar_packages
    #   run: $fsvr_step 080

    - name: 085_prepare_msys_msvc
      run: $fsvr_step 085

    - name: 090_ninja_preflight
      run: $fsvr_step 090
 
    - name: 0a0_ninja_build
      run: $fsvr_step 0a0

    - name: 0b0_bundle
      run: $fsvr_step 0b0

    - name: 0c0_upload_artifacts
      run: $fsvr_step 0c0

    - name: Setup tmate session
      if: failure()
      uses: mxschmitt/action-tmate@v3
      with:
        limit-access-to-actor: true
