name: CompileWindows

on:
  # pull_request:
  workflow_dispatch:
      inputs:
        fstuple:
          type: string
          default: base=6.6.17 repo=FirestormViewer/phoenix-firestorm branch=Firestorm_6.6.17
          options:
            - base=6.6.17 repo=FirestormViewer/phoenix-firestorm branch=Firestorm_6.6.17
            - base=7.1.2 repo=FirestormViewer/phoenix-firestorm-alpha branch=master

defaults:
  run:
    shell: bash
#   shell: C:\Program Files\Git\bin\bash.EXE --noprofile --norc -e -o pipefail {0}
#   shell: C:\msys64\usr\bin\bash.exe --noprofile --norc -e -o pipefail {0}

env:
   PATH: ${{ github.workspace }}/bin

jobs:
  windows_build:
    runs-on: windows-2022
    steps:

    # no-ops that pre-populate upload-artifact, restore-only and save-only in /d/a/_actions/actions
    - uses: actions/upload-artifact@v4
      with:
        name: my-artifact
        path: /invalid/path
        if-no-files-found: ignore
    - uses: actions/cache/restore@v4
    # - uses: actions/cache@v4
      with:
        lookup-only: true
        key: /dev/null
        path: /dev/null
  
    - name: Output Inputs
      shell: bash
      run: |
        echo "${{ toJSON(github.event.inputs) }}"
        declare -xp PATH

    - name: Initial Bootstrapping
      run: |
        # env | sort > initial.env
        git clone --quiet --filter=tree:0 --single-branch --branch ${GITHUB_REF_NAME} https://github.com/${GITHUB_REPOSITORY} repo/fsvr \
          && echo "cloned ${GITHUB_REPOSITORY} into ./fsvr" >&2
        eval `(
          for x in ${{github.event.inputs.fstuple}}; do
            echo $x | tee -a $GITHUB_ENV
          done
          echo fsvr_dir=$PWD/repo/fsvr
          echo fsvr_step=$PWD/repo/fsvr/util/build.sh
        ) | tee -a $GITHUB_ENV`
        $fsvr_dir/util/_utils.sh ht-ln $fsvr_dir/actions-node-script ./fsvr-action

        which hostname.exe && rm -v `which hostname.exe` || true
        hash || true
        which hostname && rm -v `which hostname.exe` || true
        which hostname || true

#     - name: Run as Action
#       uses: ./repo/fsvr/actions-node-script
#       with:
#         environment: '*=process.env'
#         shell: bash
#         run: |
#             echo testing 1 2 3
#             echo ${{ github.event.inputs.fstuple }} 
#             test -v ACTIONS_CACHE_URL && echo "cache url available" || echo "cache url not available"
#             env | grep -Eo '^(ACTIONS|GITHUB)_[^=]+'
#             echo "__test=true" | tee -a $GITHUB_ENV
#             echo "/c/nonexistent" | tee -a $GITHUB_PATH
# 
#     - name: PATH/ENV preflight tests
#       run: |
#         set -x
#         # env | sort > after.env ; diff initial.env after.env || true
#         test -v __test
#         test "$__test" == "true"

    - name: GHA Bootstrapping
      uses: ./fsvr-action
      with:
        run: ${{ env.fsvr_dir}}/gha-bootstrap.sh
        environment: |
            ${{ github.event.inputs.fstuple }}
            *=process.env

    - name: PATH/ENV preflight tests
      run: |
        set -x
        declare -xp PATH
        # env | sort > after-gha.env ; diff after.env after-gha.env || true
        jq --version
        which cmd.exe
        which hostname
        which hostname.exe
        hostname
        test `hostname` == "windows-2022" || exit 2022
        test -v nunja_dir
        test -d "$nunja_dir"
        
    # - name: Setup tmate session
    #   uses: mxschmitt/action-tmate@v3
    #   with:
    #     limit-access-to-actor: true

    - name: Nunja Mapping
      env:
        root_dir: repo/${{ env.branch }}
      run: |
        mkdir -pv build
        $fsvr_dir/util/generate_build_vars.sh Firestorm-VR-GHA `cat $fsvr_dir/$base/viewer_version.txt` build/ \
           | tee build/build_vars.env | tee $GITHUB_ENV
        $fsvr_dir/util/generate_msvc_env.bat > build/msvc.env
        $fsvr_dir/util/_utils.sh ht-ln $root_dir/indra indra

    - name: 010_ensure_build_directories
      run: $fsvr_step 010

    - name: 020_perform_replacements
      run: $fsvr_step 020

    - name: 040_generate_package_infos
      run: $fsvr_step 040

    - name: 050_generate_packages_info_text
      run: $fsvr_step 050
# 
#     - name: 060_download_packages
#       run: $fsvr_step 060
# 
#     - name: 070_verify_downloads
#       run: $fsvr_step 070
# 
    - name: 080_untar_packages
      uses: ./fsvr-action
      with:
        environment: '*=process.env'
        run: |
          INPUT_key=$base-build-packages-b INPUT_path=build/packages \
            /c/Program\ Files/nodejs/node \
            /d/a/_actions/actions/cache/v4/dist/restore-only/index.js \
            | grep -i 'cache restored' && echo 'yup' || echo 'nope' 

    # - name: 080_untar_packages
    #   run: $fsvr_step 080

    - name: 085_prepare_msys_msvc
      run: $fsvr_step 085

    - name: 090_ninja_preflight
      run: $fsvr_step 090
 
    - name: 0a0_ninja_build
      run: $fsvr_step 0a0
# 
#     - name: 0b0_bundle
#       run: $fsvr_step 0b0
# 
    - name: Setup tmate session
      if: failure()
      uses: mxschmitt/action-tmate@v3
      with:
        limit-access-to-actor: true
