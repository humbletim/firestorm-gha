name: C/C++ CI

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]
defaults:
  run:
    shell: bash
jobs:
  build:
    strategy:
        matrix:
          # os: [windows-latest, ubuntu-16.04]
          os: [ubuntu-16.04]
          build_type: [full]
          include:
            - os: ubuntu-16.04
              build_type: full
              # apt-dependencies: mesa-common-dev libegl1 libglvnd-dev libdouble-conversion1 libpulse0
    runs-on: ${{matrix.os}}
    env:
      AUTOBUILD_VSVER: 120
      PreferredToolArchitecture: x64
    steps:
    - uses: actions/checkout@v2
      with:
        submodules: true
    - name: Set env
      if: startsWith(matrix.os, 'windows')
      shell: cmd
      run: echo ::set-env name=AUTOBUILD_VARIABLES_FILE::%cd%\fs-build-variables\variables
    - name: Set env
      if: startsWith(matrix.os, 'ubuntu')
      shell: cmd
      run: echo ::set-env name=AUTOBUILD_VARIABLES_FILE::$PWD/fs-build-variables/variables
    - name: Download VS2013 Community
      if: startsWith(matrix.os, 'windows')
      run: choco install visualstudiocommunity2013
    - name: Setup python
      uses: actions/setup-python@v2
      with:
        python-version: 2.7
        architecture: x64
    - name: Get software versions please
      run: |
        cmake --version
        git --version
        python --version
    - name: Install autobuild through PIP
      run: pip install git+https://vcs.firestormviewer.org/autobuild-1.1#egg=autobuild
    - name: Get autobuild version
      run: autobuild --version
    - name: Configure autobuild
      if: startsWith(matrix.os, 'windows')
      shell: cmd
      run: |
        call "C:\Program Files (x86)\Microsoft Visual Studio 12.0\VC\vcvarsall.bat" amd64
        autobuild configure -A 64 -c ReleaseFS_open -- --package --chan GHA -DLL_TESTS:BOOL=FALSE
    - name: Configure autobuild
      if: startsWith(matrix.os, 'ubuntu')
      shell: bash
      run: |
        autobuild configure -A 64 -c ReleaseFS_open -- --package --chan GHA -DLL_TESTS:BOOL=FALSE --ninja --jobs 2 "-DCMAKE_EXE_LINKER_FLAGS=-L../openvr/lib/linux64,-lopenvr_api"
    - name: Build & Package
      if: startsWith(matrix.os, 'windows')
      shell: cmd
      run: |
        call "C:\Program Files (x86)\Microsoft Visual Studio 12.0\VC\vcvarsall.bat" amd64
        msbuild build-vc120-64/Firestorm.sln /target:llpackage /property:Configuration=Release;Platform=x64 /maxcpucount /detailedsummary
    - name: Build & Package
      if: startsWith(matrix.os, 'ubuntu')
      shell: bash
      run: |
        autobuild build -A 64 -c ReleaseFS_open -- --no-configure --package --chan GHA -DLL_TESTS:BOOL=FALSE --ninja --jobs 2 "-DCMAKE_EXE_LINKER_FLAGS=-L../openvr/lib/linux64,-lopenvr_api"
    - uses: actions/upload-artifact@v2
      if: startsWith(matrix.os, 'windows')
      with:
        name: fs-gha-artifact
        path: build-vc120-64/newview/Release/*_Setup.exe
    - uses: actions/upload-artifact@v2
      if: startsWith(matrix.os, 'ubuntu')
      with:
        name: fs-gha-artifact
        path: build-linux-x86_64/newview/Phoenix*.tar.*
