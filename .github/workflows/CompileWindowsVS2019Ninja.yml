name: CompileWindowsVS2019Ninja

on: [pull_request]

defaults:
  run:
    shell: bash

jobs:
  windows_build:
    runs-on: windows-latest
    env:
      AUTOBUILD_VSVER: 164
      PreferredToolArchitecture: x64
      NINJA_FLAGS: -j4
      VIEWER_VERSION_REVISION: 58205
      FSCHANNEL: FirestormVR-GHA-VS2019
      CXX: cl.exe
      CC: cl.exe
      CPP_OBJ_CACHE_REV: 2

    steps:
    - name: .git cache
      uses: actions/cache@v2
      with:
        path: |
          .git
          .gitmodules
          indra
          openvr/.git*
          fs-build-variables/.git*
          vcpkg/.git*
        key: ${{ runner.os }}-gittest-1-${{ env.FSCHANNEL }}
    - uses: actions/checkout@v2
      with:
        clean: false
        submodules: true
        # include branch tag histories (for timesync)
        fetch-depth: 0

    - name: Set VIEWER_VERSION_GITHASH
      shell: bash
      run: |
        majorVer=`cat indra/newview/VIEWER_VERSION.txt | cut -d "." -f 1`
        minorVer=`cat indra/newview/VIEWER_VERSION.txt | cut -d "." -f 2`
        patchVer=`cat indra/newview/VIEWER_VERSION.txt | cut -d "." -f 3`
        echo ::set-env name=VIEWER_VERSION_STR::${majorVer}.${minorVer}.${patchVer}.${VIEWER_VERSION_REVISION}
        echo ::set-env name=VIEWER_VERSION_GITHASH::$(git log -n 1 | grep "Merge " | awk '{ print $2 }' | xargs git rev-parse --short)

    - name: fetch git-restore-mtime
      shell: powershell
      run: wget -O git-restore-mtime https://raw.githubusercontent.com/MestreLion/git-tools/master/git-restore-mtime
    - name: run git-restore-mtime
      run: |
        git config diff.renameLimit 8192
        py -3 git-restore-mtime --commit --no-directories indra

    # - name: run git-timesync
    #   run: |
    #     git ls-files | grep -E 'indra/.*\.(cpp|c|h|hpp|inl)$' |
    #       while IFS= read -r file; do
    #         touch -m -d "`git log -n1 --pretty='format:%ci' "$file"`" "$file" &
    #       done
    #     wait
    - uses: seanmiddleditch/gha-setup-vsdevenv@master
    - uses: seanmiddleditch/gha-setup-ninja@master
    - uses: actions/setup-python@v2
      with:
        python-version: 2.7
        architecture: x64

    - name: Get pip cache dir
      id: pip-cache
      run: |
        echo "::set-output name=dir::$(pip cache dir)"
    - name: pip cache
      uses: actions/cache@v2
      with:
        path: ${{ steps.pip-cache.outputs.dir }}
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    - name: Install autobuild through PIP
      run: |
        pip install git+https://vcs.firestormviewer.org/autobuild-1.1#egg=autobuild
        echo PYTHONPATH=$PYTHONPATH

    - name: Set env
      shell: cmd
      run: |
        echo ::set-env name=AUTOBUILD_ID::-
        echo ::set-env name=AUTOBUILD_INSTALLABLE_CACHE::%cd%\autobuild-cache
        echo ::set-env name=AUTOBUILD_VARIABLES_FILE::%cd%\fs-build-variables\variables
        echo ::set-env name=AUTOBUILD_CONFIG_FILE::%cd%\vs2019_autobuild.xml
        echo ::set-env name=BUILD_DIR::build-vc${{ env.AUTOBUILD_VSVER }}-64
        
        echo ::set-env name=NINJA_FLAGS::${{ env.NINJA_FLAGS }} -C build-vc${{ env.AUTOBUILD_VSVER }}-64
        echo github.workspace = ${{ github.workspace }}
        echo cd = %cd%

    - name: Get software versions please
      run: |
        echo NINJA_FLAGS=="${{ env.NINJA_FLAGS }}"
        echo BUILD_DIR==${{ env.BUILD_DIR }}
        which cl.exe
        cl.exe
        which cmake
        cmake --version
        which git
        git --version
        which pip
        pip --version
        which python
        python --version
        which ninja
        ninja --version
        which autobuild
        autobuild --version

    - name: VCPKG
      uses: lukka/run-vcpkg@master
      id: runvcpkg
      with:
        vcpkgArguments: '@${{ github.workspace }}/indra/vcpkg/install_args.txt'
        vcpkgDirectory: '${{ github.workspace }}/vcpkg'
        appendedCacheKey: ${{ hashFiles( 'indra/vcpkg/install_args.txt' ) }}-${{ hashFiles( 'indra/vcpkg/ports/**' ) }}

    - name: Debug print vars
      run: |
        echo runvcpkg.vcpkgArguments: '@${{ github.workspace }}/indra/vcpkg/install_args.txt'
        echo runvcpkg.vcpkgDirectory: '${{ github.workspace }}/vcpkg'
        echo runvcpkg.appendedCacheKey: ${{ hashFiles( 'indra/vcpkg/install_args.txt' ) }}-${{ hashFiles( 'indra/vcpkg/ports/**' ) }}
        ./vcpkg/vcpkg.exe version
        ./vcpkg/vcpkg.exe list

    - name: cache -- autobuild downloaded installables
      id: cacheddownloads
      uses: actions/cache@v2
      with:
        path: autobuild-cache
        key: ${{ runner.os }}-cacheddownloads-${{ hashFiles('vs2019_autobuild.xml') }}-${{ env.FSCHANNEL }}

    - name: cache -- autobuild installed packages
      id: cachedpackages
      uses: actions/cache@v2
      with:
        path: ${{ env.BUILD_DIR }}/packages
        key: ${{ runner.os }}-cachedpackages-${{ hashFiles('vs2019_autobuild.xml') }}-${{ env.FSCHANNEL }}

    - name: cache -- autobuild installed packages detection
      if: steps.cachedpackages.outputs.cache-hit == 'true'
      run: |
        echo ::set-env name=AUTOBUILD_CACHE_HIT::-DAUTOBUILD_CACHE_HIT=ON

    - name: autobuild -- configure
      run: |
        autobuild configure -A 64 -c ReleaseFS_open -- \
          --package --openal --openvr --vcpkg --ninja --chan ${{ env.FSCHANNEL }} \
          ${{ env.AUTOBUILD_CACHE_HIT }} -DGENERATE_DEBUG_SYMBOLS:BOOL=OFF

    - name: cache -- lllibs.cpp.obj
      id: cachedllibs
      uses: actions/cache@v2
      with:
        path: |
          ${{ env.BUILD_DIR }}/**/*.cpp.obj
          !${{ env.BUILD_DIR }}/newview/**/*.cpp.obj
          ${{ env.BUILD_DIR }}/.ninja_log
          ${{ env.BUILD_DIR }}/.ninja_deps
        key: ${{ runner.os }}-cachedllibs-${{ env.CPP_OBJ_CACHE_REV }}-${{ env.FSCHANNEL }}

    - name: Build ll* libs
      run: |
        ninja ${{ env.NINJA_FLAGS }} -n -d explain llappearance llaudio llcharacter llcommon llcorehttp llcrashlogger llimage llimagej2coj llinventory llmath llmessage llplugin llprimitive llrender llui llvfs llwindow llxml
        ninja ${{ env.NINJA_FLAGS }} llappearance llaudio llcharacter llcommon llcorehttp llcrashlogger llimage llimagej2coj llinventory llmath llmessage llplugin llprimitive llrender llui llvfs llwindow llxml
        du -hsc ${{ env.BUILD_DIR }}/*

    - name: generate llviewerprecompiledheaders.i
      run: |
        cl.exe -DWIN32 -D_WINDOWS -DADDRESS_SIZE=64 -DLL_WINDOWS \
          -Ivcpkg/installed/x64-windows/include -Iindra/llcommon -Iindra/llmessage -Iindra/llvfs -Iindra/llmath \
          -EP -E -C indra/newview/llviewerprecompiledheaders.h > ${{ env.BUILD_DIR }}/llviewerprecompiledheaders.i

    - name: cache -- .pch
      id: cachedpch
      uses: actions/cache@v2
      with:
        path: |
          ${{ env.BUILD_DIR }}/**/*.pch
          ${{ env.BUILD_DIR }}/newview/pch.stamp
          ${{ env.BUILD_DIR }}/newview/pch.cpp
        key: ${{ runner.os }}-cachedpch-2-${{ hashFiles(format('{0}{1}', env.BUILD_DIR, '/llviewerprecompiledheaders.i')) }}-${{ env.FSCHANNEL }}

    - name: Generate precompiled headers
      if: steps.cachedpch.outputs.cache-hit != 'true'
      run: |
        ninja ${{ env.NINJA_FLAGS }} xprecompiled_stamp
        ninja ${{ env.NINJA_FLAGS }} xprecompiled

    - name: cache -- newview* .cpp.obj
      id: cachednewview
      uses: actions/cache@v2
      with:
        path: |
          ${{ env.BUILD_DIR }}/newview/**/*.cpp.obj
        key: ${{ runner.os }}-cachednewview-${{ env.CPP_OBJ_CACHE_REV }}-${{ env.FSCHANNEL }}

    - name: Build firestorm executable
      run: ninja ${{ env.NINJA_FLAGS }} firestorm-bin
    
    - name: Generate installer
      run: ninja ${{ env.NINJA_FLAGS }} llpackage

    - name: Upload Artifact
      uses: actions/upload-artifact@v2
      with:
        name: ${{ env.FSCHANNEL }}-artifact
        path: ${{ env.BUILD_DIR }}/newview/Phoenix*_Setup.exe

    - name: cache autobuild xml file
      run: cp -av '${{ env.AUTOBUILD_CONFIG_FILE }}' '${{ env.AUTOBUILD_INSTALLABLE_CACHE }}/'
    - name: Upload Autobuild Dependency Set
      uses: actions/upload-artifact@v2
      with:
        name: ${{ env.FSCHANNEL }}-autobuild-deps
        path: ${{ env.AUTOBUILD_INSTALLABLE_CACHE }}
  
